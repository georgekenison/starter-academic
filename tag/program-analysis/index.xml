<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>program analysis | George Kenison</title><link>https://georgekenison.github.io/tag/program-analysis/</link><atom:link href="https://georgekenison.github.io/tag/program-analysis/index.xml" rel="self" type="application/rss+xml"/><description>program analysis</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 23 May 2023 00:00:00 +0000</lastBuildDate><image><url>https://georgekenison.github.io/media/icon_hu77e73f7cff5c696fd30270c2c33dd3bf_36783_512x512_fill_lanczos_center_3.png</url><title>program analysis</title><link>https://georgekenison.github.io/tag/program-analysis/</link></image><item><title>Solving Invariant Generation for Unsolvable Loops</title><link>https://georgekenison.github.io/post/2022sastalk/</link><pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate><guid>https://georgekenison.github.io/post/2022sastalk/</guid><description>&lt;p>Marcel Moosbrugger presented our joint work (&lt;a href="https://georgekenison.github.io/publication/amrollahi-2022-invariant/">see here&lt;/a>)
on invariant generation for unsolvable loops at the ACM SIGPLAN 29th Static Analysis Symposium (SAS 2022).&lt;/p>
&lt;h3 id="abstract">Abstract&lt;/h3>
&lt;p>Automatically generating invariants, key to computer-aided analysis of probabilistic and deterministic programs and compiler optimisation, is a challenging open problem. Whilst the problem is in general undecidable, the goal is settled for restricted classes of loops. For the class of solvable loops, introduced by Kapur and RodrÃ­guez-Carbonell in 2004, one can automatically compute invariants from closed-form solutions of recurrence equations that model the loop behaviour. In this paper we establish a technique for invariant synthesis for loops that are not solvable, termed unsolvable loops. Our approach automatically partitions the program variables and identifies the so-called defective variables that characterise unsolvability. We further present a novel technique that automatically synthesises polynomials, in the defective variables, that admit closed-form solutions and thus lead to polynomial loop invariants. Our implementation and experiments demonstrate both the feasibility and applicability of our approach to both deterministic and probabilistic programs.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/fZbGGx2ifho" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Dynamical Systems and Program Analysis</title><link>https://georgekenison.github.io/post/dynamicaltalk/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><guid>https://georgekenison.github.io/post/dynamicaltalk/</guid><description>&lt;p>James (Ben) Worrell gave a keynote talk on algorithmic analysis of dynamical systems at the 48th ACM SIGPLAN Symposium on Principles of Programming Languages (POPL 2021).
During his talk, Ben presented some of our ongoing work on inequality decision problems for low-order holonomic sequences (&lt;a href="https://georgekenison.github.io/publication/kenison-2020-positivity/">see here&lt;/a>). The abstract and recording for the talk are given below. Here are Ben&amp;rsquo;s &lt;a href="https://popl21.sigplan.org/details/POPL-2021-research-papers/69/Dynamical-Systems-and-Program-Analysis" target="_blank" rel="noopener">slides&lt;/a>.&lt;/p>
&lt;h3 id="abstract">Abstract&lt;/h3>
&lt;p>This talk is about the algorithmic analysis of dynamical systems and its relevance to the foundations of program analysis. A dynamical system is a state-based system that is specified by a rule specifying how the state changes over time (e.g., a swinging pendulum or a cobweb model of supply and demand in economics). While the study of dynamical systems permeates the quantitative sciences, in this talk we focus on computational aspects and their relevance to basic verification problems, such as termination and invariant synthesis. We highlight in particular certain problems that can be traced back to the program-analysis literature, e.g., concerning the decidability of termination for linear constraint loops and the computability of polyhedral and polynomial invariants for various classes of transition systems. In the talk we give some of the mathematical context of these problems, discuss recent progress, and highlight unsolved cases. The characteristic feature of the problems we consider is that they turn out to be much more challenging than they might first appear to the innocent-minded and in some cases have connections to problems at the frontiers of modern mathematics.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/9kUlHlvfU94" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item></channel></rss>